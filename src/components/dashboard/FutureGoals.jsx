import React, { useEffect, useState, useRef } from 'react';
import './FutureGoals.css';

const FutureGoals = () => {
  const [isVisible, setIsVisible] = useState(false);
  const sectionRef = useRef(null);

  const goals = [
    {
      id: 1,
      title: '‡§®‡§Ø‡§æ ‡§™‡§∂‡•Å ‡§Ü‡§∂‡•ç‡§∞‡§Ø',
      description: '500+ ‡§ú‡§æ‡§®‡§µ‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§Ü‡§∂‡•ç‡§∞‡§Ø ‡§∏‡•ç‡§•‡§≤',
      target: '‚Çπ50 ‡§≤‡§æ‡§ñ',
      status: 'Planning',
      icon: 'üè†',
      color: '#3b82f6'
    },
    {
      id: 2,
      title: '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§Ø‡•Ç‡§®‡§ø‡§ü',
      description: '‡§¶‡•Ç‡§∞‡§∏‡•ç‡§• ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç',
      target: '‚Çπ75 ‡§≤‡§æ‡§ñ',
      status: 'In Progress',
      icon: 'üöë',
      color: '#10b981'
    },
    {
      id: 3,
      title: '‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
      description: '1000+ ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§∏‡•á‡§Ç‡§ü‡§∞',
      target: '‚Çπ1 ‡§ï‡§∞‡•ã‡§°‡§º',
      status: 'Launching Soon',
      icon: 'üéì',
      color: '#f59e0b'
    },
    {
      id: 4,
      title: '‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§¨‡•à‡§Ç‡§ï ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï',
      description: '10 ‡§®‡§è ‡§∂‡§π‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§µ‡§ø‡§§‡§∞‡§£ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
      target: '‚Çπ30 ‡§≤‡§æ‡§ñ',
      status: 'Planning',
      icon: 'üè™',
      color: '#8b5cf6'
    },
    {
      id: 5,
      title: '‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§∏‡•á‡§µ‡§ï ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£',
      description: '500+ ‡§Ø‡•Å‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§ï‡•å‡§∂‡§≤ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡•ç‡§∞‡§∂‡§ø‡§ï‡•ç‡§∑‡§£',
      target: '‚Çπ20 ‡§≤‡§æ‡§ñ',
      status: 'In Progress',
      icon: 'üë•',
      color: '#ef4444'
    },
    {
      id: 6,
      title: '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∞‡§æ‡§π‡§§',
      description: '‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§Ü‡§™‡§¶‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',
      target: '‚Çπ40 ‡§≤‡§æ‡§ñ',
      status: 'Planning',
      icon: 'üö®',
      color: '#06b6d4'
    }
  ];

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      { threshold: 0.2 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => observer.disconnect();
  }, []);

  const getStatusColor = (status) => {
    switch (status) {
      case 'Planning':
        return '#6b7280';
      case 'In Progress':
        return '#f59e0b';
      case 'Launching Soon':
        return '#10b981';
      default:
        return '#6b7280';
    }
  };

  return (
    <section ref={sectionRef} className="future-goals">
      <div className="goals-container">
        <h2 className="goals-title">‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Å</h2>
        <p className="goals-subtitle">
          ‡§π‡§Æ‡§æ‡§∞‡•á ‡§Ü‡§ó‡§æ‡§Æ‡•Ä ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§î‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç
        </p>
        
        <div className="goals-scroll-container">
          <div className="goals-grid">
            {goals.map((goal, index) => (
              <div 
                key={goal.id}
                className={`goal-card ${isVisible ? 'fade-in-up' : ''}`}
                style={{ 
                  animationDelay: `${index * 0.1}s`,
                  borderColor: goal.color
                }}
              >
                <div className="goal-header">
                  <div className="goal-icon" style={{ color: goal.color }}>
                    {goal.icon}
                  </div>
                  <div 
                    className={`goal-status ${goal.status === 'In Progress' ? 'pulse' : ''}`}
                    style={{ 
                      backgroundColor: getStatusColor(goal.status),
                      borderColor: goal.status === 'In Progress' ? goal.color : 'transparent'
                    }}
                  >
                    {goal.status}
                  </div>
                </div>
                
                <div className="goal-content">
                  <h3 className="goal-title">{goal.title}</h3>
                  <p className="goal-description">{goal.description}</p>
                  <div className="goal-target">
                    <span className="target-label">‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø:</span>
                    <span className="target-value">{goal.target}</span>
                  </div>
                </div>
                
                {goal.status === 'In Progress' && (
                  <div className="goal-glow" style={{ borderColor: goal.color }}></div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default FutureGoals; 